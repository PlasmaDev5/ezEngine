[PLATFORMS]
ALL

[PERMUTATIONS]
SHADING_QUALITY = SHADING_QUALITY_NORMAL

[COMPUTESHADER]

#include <Shaders/Common/Common.h>
#include <Shaders/Common/GlobalConstants.h>
#include <Shaders/Pipeline/SSR/SSRConstants.h>

Texture2D InputTexture;
RWTexture2D<float4> Output;

[numthreads(POSTPROCESS_BLOCKSIZE, POSTPROCESS_BLOCKSIZE, 1)]
void main(uint3 thread_id : SV_DispatchThreadID)
{

    if (any(int2(thread_id.xy) >= ViewportSize.xy))
        return;

    float3 s1 = InputTexture[thread_id.xy].rgb;               // current pixel
    float3 s2 = InputTexture[thread_id.xy + int2(1, 0)].rgb;  // right
    float3 s3 = InputTexture[thread_id.xy + int2(-1, 0)].rgb; // left
    float3 s4 = InputTexture[thread_id.xy + int2(0, 1)].rgb;  // up
    float3 s5 = InputTexture[thread_id.xy + int2(0, -1)].rgb; // down

    // calculate weights based on luminance
    float s1w          = 1 / (GetLuminance(s1) + 1);
    float s2w          = 1 / (GetLuminance(s2) + 1);
    float s3w          = 1 / (GetLuminance(s3) + 1);
    float s4w          = 1 / (GetLuminance(s4) + 1);
    float s5w          = 1 / (GetLuminance(s5) + 1);
    float one_div_wsum = 1.0 / (s1w + s2w + s3w + s4w + s5w);

    // compute weighted average
    float3 color = (s1 * s1w + s2 * s2w + s3 * s3w + s4 * s4w + s5 * s5w) * one_div_wsum;

    // write the result to the output texture
    Output[thread_id.xy] = float4(saturate_16(color), InputTexture[thread_id.xy].a);
}